CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

# HIP_PATH
IF(NOT DEFINED $ENV{HIP_PATH})
  SET(HIP_PATH /opt/rocm/hip)
ELSE()
  SET(HIP_PATH $ENV{HIP_PATH})
ENDIF()

# HCC_PATH
IF(NOT DEFINED $ENV{HCC_PATH})
  SET(HCC_PATH /opt/rocm/hcc)
ELSE()
  SET(HCC_PATH $ENV{HCC_PATH})
ENDIF()

# HIPBLAS_PATH
IF(NOT DEFINED $ENV{HIPBLAS_PATH})
  SET(HIPBLAS_PATH /opt/rocm/hcblas/)
ELSE()
  SET(HIPBLAS_PATH $ENV{HIPBLAS_PATH})
ENDIF()

# HIPRNG_PATH
IF(NOT DEFINED $ENV{HIPRNG_PATH})
  SET(HIPRNG_PATH /opt/rocm/hcrng/)
ELSE()
  SET(HIPRNG_PATH $ENV{HIPRNG_PATH})
ENDIF()

# HIPSPARSE_PATH
IF(NOT DEFINED $ENV{HIPSPARSE_PATH})
  SET(HIPSPARSE_PATH /opt/rocm/hcsparse/)
ELSE()
  SET(HIPSPARSE_PATH $ENV{HIPSPARSE_PATH})
ENDIF()



SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" 
                      "${CMAKE_MODULE_PATH}"
                      "${HIP_PATH}/cmake")

EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig -P OUTPUT_VARIABLE PLATFORM)
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig --cpp_config OUTPUT_VARIABLE HIP_CXX_FLAGS)
SET(HIP_CXX_FLAGS "-D__HIP_PLATFORM_HCC__  -I/opt/rocm/hip/include -I/opt/rocm/hcc/include")

FIND_PACKAGE(Torch REQUIRED)
FIND_PACKAGE(HIP 1.0 REQUIRED)

IF(${HIP_PLATFORM} STREQUAL "nvcc") # NVCC
  FIND_PACKAGE(CUDA 6.5 REQUIRED)
ELSE() # HCC
  SET(HIP_HIPCC_FLAGS "-DGENERIC_GRID_LAUNCH=1 ${HIP_HIPCC_FLAGS}")
  SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})
  SET(CMAKE_C_COMPILER ${HIP_HIPCC_EXECUTABLE})
  SET(CMAKE_C_FLAGS "-std=c99 -Werror=implicit-function-declaration ${CMAKE_C_FLAGS}")
  SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")
  SET(CMAKE_CXX_FLAGS  "-std=c++11 ${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")
ENDIF()

# # TODO: temporary blunt implements.
IF (${PLATFORM} MATCHES "hcc")
  include_directories(${HCC_PATH}/include)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/external/Thrust)
ENDIF()
include_directories(${HIP_PATH}/include)
INCLUDE_DIRECTORIES(${HIPRNG_PATH}/include)
INCLUDE_DIRECTORIES(${HIPSPARSE_PATH}/include)

MESSAGE( STATUS "HIP_CXX_FLAGS:         " ${HIP_CXX_FLAGS} )
MESSAGE( STATUS "CMAKE_C_FLAGS:         " ${CMAKE_C_FLAGS} )
MESSAGE( STATUS "CMAKE_CXX_FLAGS:       " ${CMAKE_CXX_FLAGS} )
MESSAGE( STATUS "CMAKE_CXX_COMPILER:    " ${CMAKE_CXX_COMPILER} )
MESSAGE( STATUS "CMAKE_C_COMPILER:      " ${CMAKE_C_COMPILER} )
INCLUDE_DIRECTORIES("${Torch_INSTALL_INCLUDE}/THC")
LINK_DIRECTORIES("${Torch_INSTALL_LIB}")

FILE(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/lib/THCUNN/THCUNN.h THCUNN_headers NEWLINE_CONSUME)
FILE(WRITE THCUNN_h.lua "return [[")
FILE(APPEND THCUNN_h.lua ${THCUNN_headers})
FILE(APPEND THCUNN_h.lua "]]")

FILE(STRINGS lib/THCUNN/generic/THCUNN.h THCUNN_generic_headers NEWLINE_CONSUME)
FILE(WRITE THCUNN_generic_h.lua "return [[")
FILE(APPEND THCUNN_generic_h.lua ${THCUNN_generic_headers})
FILE(APPEND THCUNN_generic_h.lua "]]")

FILE(GLOB luasrc *.lua)

ADD_SUBDIRECTORY(lib)

INSTALL(
  FILES
  ${luasrc}
  DESTINATION "${Torch_INSTALL_LUA_PATH_SUBDIR}/cunn")


#######################################################################################
# CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
# CMAKE_POLICY(VERSION 2.8)
# 
# SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")
# 
# FIND_PACKAGE(Torch REQUIRED)
# FIND_PACKAGE(CUDA 6.5 REQUIRED)
# 
# INCLUDE_DIRECTORIES("${Torch_INSTALL_INCLUDE}/THC")
# LINK_DIRECTORIES("${Torch_INSTALL_LIB}")
# 
# FILE(STRINGS lib/THCUNN/THCUNN.h THCUNN_headers NEWLINE_CONSUME)
# FILE(WRITE THCUNN_h.lua "return [[")
# FILE(APPEND THCUNN_h.lua ${THCUNN_headers})
# FILE(APPEND THCUNN_h.lua "]]")
# 
# FILE(STRINGS lib/THCUNN/generic/THCUNN.h THCUNN_generic_headers NEWLINE_CONSUME)
# FILE(WRITE THCUNN_generic_h.lua "return [[")
# FILE(APPEND THCUNN_generic_h.lua ${THCUNN_generic_headers})
# FILE(APPEND THCUNN_generic_h.lua "]]")
# 
# FILE(GLOB luasrc *.lua)
# 
# ADD_SUBDIRECTORY(lib)
# 
# INSTALL(
#   FILES
#   ${luasrc}
#   DESTINATION "${Torch_INSTALL_LUA_PATH_SUBDIR}/cunn")
