CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

# SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake
#                       ${CMAKE_MODULE_PATH}
#                       "${HIP_PATH}/cmake")
# EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig -P OUTPUT_VARIABLE PLATFORM)


IF(NOT Torch_FOUND)
  FIND_PACKAGE(Torch REQUIRED)
ENDIF()

IF(NOT TH_LIBRARIES)
  SET(TH_LIBRARIES "TH")
ENDIF(NOT TH_LIBRARIES)
MESSAGE(STATUS "TH_LIBRARIES: ${TH_LIBRARIES}")
IF(NOT THC_LIBRARIES)
  SET(THC_LIBRARIES "THC")
ENDIF(NOT THC_LIBRARIES)
MESSAGE(STATUS "THC_LIBRARIES: ${THC_LIBRARIES}")

IF (${PLATFORM} MATCHES "nvcc")
  IF(NOT CUDA_FOUND)
    FIND_PACKAGE(CUDA 5.5 REQUIRED)
  ENDIF()
ENDIF() # PLATFORM MATCHES

IF(${PLATFORM} MATCHES "nvcc")
  MESSAGE(STATUS "got cuda version " ${CUDA_VERSION})

  #Â Detect CUDA architecture and get best NVCC flags
  IF(NOT COMMAND CUDA_SELECT_NVCC_ARCH_FLAGS)
    INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/select_compute_arch.cmake)
  ENDIF()
  
  CUDA_SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA $ENV{TORCH_CUDA_ARCH_LIST})
  LIST(APPEND CUDA_NVCC_FLAGS ${NVCC_FLAGS_EXTRA})
  
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9.3")
      if(CUDA_VERSION VERSION_LESS "8.0")
        MESSAGE(STATUS "Found gcc >=5 and CUDA <= 7.5, adding workaround C++ flags")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_FORCE_INLINES -D_MWAITXINTRIN_H_INCLUDED -D__STRICT_ANSI__")
      endif(CUDA_VERSION VERSION_LESS "8.0")
    endif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9.3")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  
  MESSAGE(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")
ENDIF() #PLATFORM

IF(NOT THCUNN_INSTALL_LIB_SUBDIR)
  SET(THCUNN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "THCUNN install library directory")
ENDIF()

FILE(GLOB src-cuda *.cu)

IF (${PLATFORM} MATCHES "hcc")
  include_directories(${HIPBLAS_PATH}/include)
  MESSAGE(STATUS "including HIPBLAS headers" ${HIPBLAS_PATH})
ENDIF()

HIP_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
HIP_ADD_LIBRARY(THCUNN MODULE ${src-cuda})

TARGET_COMPILE_DEFINITIONS(THCUNN PUBLIC HIP_GENERIC_GRID_LAUNCH=1)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

IF(${PLATFORM} STREQUAL "nvcc")
  CUDA_ADD_CUBLAS_TO_TARGET(THC)
  TARGET_LINK_LIBRARIES(THC TH ${CUDA_curand_LIBRARY})
  TARGET_LINK_LIBRARIES(THCUNN THC TH ${CUDA_cusparse_LIBRARY})
ENDIF()

IF(${PLATFORM} STREQUAL "hcc")
  FIND_LIBRARY(HIPBLAS_LIBRARY hipblas HINTS ${HIPBLAS_PATH}/lib)
  TARGET_LINK_LIBRARIES(THCUNN THC TH hip_hcc ${HIPBLAS_LIBRARY})
ENDIF()

INSTALL(TARGETS THCUNN LIBRARY DESTINATION ${THCUNN_INSTALL_LIB_SUBDIR})
